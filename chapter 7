
表格
7.1.1 表格特有的元素
  summary 和 caption，它基本上用作表格的标题。尽管不是必须有的元素。另一个是summary 可以应用于表格标签，用来描述表格的内容
  与图像的alt文本类似。
  <table class="cal" summary="A calendar style date picker">
    <caption>
      <a href="cal.php?month=dec08" rel="pref">&lt;</a>January 2008
      <a href="cal.php?month=feb09" rel="next">&gt;</a>
    </caption>
  </table>
  
  2 thead, tbody和tfoot 利用它们可以把表格划分为逻辑部分！行标题和列标题应该使用th而不是td标记。
  <thead>
    <tr>
      <th scope="col">Sun</th>
      <th scope="col">MOn</th>
    </tr>
  </thead>
  这里设置scope的直为row或col来定义它们是行标题还是列标题。
  
  3col和colgroup. colgroup能够使用col元素对一个或多个列定义和分组。
  <colgroup>
    <col id="sun" />
    <col id="mon" />
  </colgroup>
  
7.12 数据表格标记
<table class="cal" summary="A calendar style date picker">
  <caption>
    <a href="#" rel="prev">&lt;</a> January 2008 <a href="#" rel="next">&gt;</a>
  </caption>
    <colgroup>
      <col id="sun" />
      <col id="mon" />
      <col id="tue" />
      <col id="wed" />
      <col id="thur" />
      <col id="fri" />
      <col id="sat" />
    </colgroup>
  <thead>
    <tr>
      <th scope="col">Sun</th>
      <th scope="col">Mon</th>
      <th scope="col">Tue</th>
      <th scope="col">Wed</th>
      <th scope="col">Tur</th>
      <th scope="col">Fri</th>
      <th scope="col">Sat</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="null">30</td>
      <td class="null">32</td>
      <td><a href="#">1</a></td>
      <td><a href="#">2</a></td>
      <td><a href="#">3</a></td>
      <td><a href="#">4</a></td>
      <td><a href="#">5</a></td>
    </tr>
    <tr>
      <td><a href="#">6</a></td>
      <td><a href="#">7</a></td>
      <td class="selected"><a href="#">8</a></td>
      <td><a href="#">9</a></td>
      <td><a href="#">10</a></td>
      <td><a href="#">11</a></td>
      <td><a href="#">12</a></td>
    </tr>
    ...
  </tbody>  
  </table>
  
7.1.3 对表格应用样式
  CSS规范有两个表格边盒模型：单独的和叠加的。在单独模型中，在各个单元格周围有边框，
  而在叠加的模型中，单元格共享边框。大多数浏览器采用单独模型。首先要做的是将表格的
  border-collapse属性设置为collapse.双边框创建斜面的效果则：border-collapse:separate
  table.cal {
    border-collapse:seperate;
    border-spacing: 0;
    text-align: center;
    color: #333;
    }
  .cal th, .cal td {
    margin: 0;
    padding: 0;
    }
  CSS的border-spacing 属性可以控制单元格的距离，IE7和更低版本不理解这个属性！
  因此需要用老式cellspacing属性！
  <table cellspacing="0" calss="cal" summary="sdfs">

7.1.4 添加视觉样式！
  增加字号采用粗体，应用垂直内边距增加标题上下的空间。
  .cal caption {
    font-size: 1.25em;
    padding-top: 0.692em;
    padding-bottom: 0.692em;
    background-color: #d4dde6;
    }
    /*为了确定当前月份两边的前一个和下一个链接的位置，给他们设置水平外边距，然后让它们分别向左边和右边浮动。然后，通过应用内边距
    让它们的点击区域更突出。为了给这些链接设置样式，使用属性选择器来选择rel属性！*/
  .cal caption [rel="prev"] {
    float: left;
    margin-left: 0.2em;
    }
    
  .cal caption [rel="next"] {
    float: right;
    margin-right: 0.2em;
    }
  .cal caption a:link, .cal caption a:visited {
    text-decoration: none;
    color: #333;
    padding: 0 0.2em;
    }
  .cal caption a:hover, .cal caption a:active, .cal caption a:focus {
    background-color: #6d8ab7;
    }
  /*为了区分第一行，将背景设置比表格其他部分浅，并且下划线。*/
  .cal thead th {
    background-color: #d4dde6;
    border-bottom: 1px solid #a9bacb;
    font-size: 0.875;
    }
  /*让表格中的文本是灰色的，并设置阴影*/
  .cal tbody {
    color: #a4a4a4;
    text-shadow: 1px 1px 1px white;
    background-color: #d0d9e2;
    }
  /*让单元格产生斜面的效果，需要在各个边上设置不同的颜色；顶部和左边颜色浅，底部和右边颜色深。然后需要设置锚链接的样式。*/
  /*设置为block并应用内边距，创建像按钮一样的点击区域。*/
  .cal tbody td {
    border-top: 1px solid #e0e0e1;
    border-right: 1px solid #9f9fa1;
    border-bottom: 1px solid #acacad;
    border-left: 1px solid #dfdfe0;
    }
    .cal tbody a {
      display:block;
      text-decoration: none;
      color:#333;
      background-color: #c0c8d2;
      font-weight: bold;
      padding: 0.385em 0.692em 0.308em 0.692em;
      }
    
    /*设置锚链接的悬停状态。前面选择的日期通过包含selected类继承这个样式。*/
    .cal tbody a:hover,
    .cal tbody a:focus,
    .cal tbody a:active,
    .cal tbody .selected a:link,
    .cal tbody .selected a:visited,
    .cal tbody .selected a:hover,
    .cal tbody .selected a:focus,
    .cal tbody .selected a:active {
      background-color: #6d8ab7;
      color: white;
      text-shadow: 1px 1px 2px #22456b;
      /*如果希望显示日期被按下的外观，那么修改单元格的边框颜色，让顶和左边框比较深，底和右边框比较浅*/
      }
  7.2 简单的表单布局
  7.2.1 有用的表单元素
  fieldset元素用来对相关信息块进行分组！
  为了识别每个fieldset的用途，可以使用legend元素。legend就像是fieldset的标题！
  label元素极其重要，因为它可以帮助添加结构和增加表单的可用性和可访问性。将标签和表单控件关联起来非常容易！一种是隐式方式 ：
  <label> email <input name="email" type="text"/><label>
  另一种是显示方式：
  <label for="email">email<label>
  <input name="email" id="email" type="text" />
  /*在表单输入控件和标签之间创建关联需要ID属性，而将表单数据发送回服务器需要NAME属性*/
  
7.2.2基本布局
使用3个结构性元素对第一个fieldset内容加标记！
<fieldset>
  <legend>Your Contact Details</legend>
  <div>
    <label for="author">Name: </label>
    <input name="author" id="author" type="text" />
  </div>
  <div>
    <label for="email"> Email Address:</label>
    <input name="email" id="email" type="text" />
  </div>
  <div>
    <label for="url">Web Address:</label>
    <input name="url" id="url" type="text" />
  </div>
  </fieldset>
  /*fieldset必须使用外边距进行垂直分隔，可以使用内边距在周围增加一些空间。让legend显示为粗体*/
  fieldset {
    margin :1em 0;
    padding 1em;
    border: 1px solid #ccc;
    background:#f8f8f8;
    }
  legend {
    font-weight: bold;
    }
  
  /*标签在默认情况下是行内元素。将它们的display属性设置为block会是它们产生自己的块框，迫使输入元素转到下一行。在不同浏览器中，文本输入
  框的宽度不一样，为了一致，应该显式的设置文本输入框的宽度。下面用em创建可伸缩的表单布局！
  
  label {
    display: block;
    cursor: pointer;
    }
  input {
    width: 20em;
    }
7.2.3其他元素
      
