BUG修复BUG！！

1. 特殊性和分类次序的问题
将内容区域所有段落的背景设置为白色。但是，希望intro段落是橙色的！：
  .content p {
    background-color: white;
  }
  .intro {
    background-color: orange;
  }
  在浏览器中运行，段落的背景全为白色，为了达到目的需要intro段落的选择器更特殊：
  .content p {
    background-color: whtie;
  }
  .content.intro {
    background-color: orange;
  }
  
  2. 外边距叠加问题
  以div元素内嵌套的一个段落为例子：
    <div id="box">
      <p>This paragraph has a 20px margin.</p>
    </div>
  #box {
    margin: 10px;
    background-color #d5d5d5;
  }
  p {
    margin: 20px;
    background-color: #6699FF;
  }
  你可能认为在段落和div之间有20像素的外边距，在div外边围绕着10像素的外边距。实际上发生了两个情况。首先，段落的20像素顶外边距和底外边距与
  div的10像素外边距叠加，形成一个20像素的垂直外边距。其次，这些外边距不是被div包围，而是突出到div的顶部和底部的外边。出现这种情况是
  由于具有块级子元素的元素计算其高度的方式造成的！！！
  
  简单的解决方案是： 通过添加一个垂直边框或内边距，外边距就不再叠加了，而且元素的高度就是它包含的子元素的顶部和底部外边距边缘之间的距离！！
  
#box {
  margin: 10px;
  padding: 1px;
  background-color: #d5d5d5;
}

p {
  margin 20px;
  background-color: #6699ff;
}



9.2 捕捉BUG的基本知识！！！
firefox 工具条可以显示地显示标准模式还是混杂模式！ 
推荐使用firefox 或者safari ....


9.2.1 尽量一开始避免BUG
9.2.2 隔离问题！

一旦确信出现了BUG，就需要尽力隔离问题。隔离问题的一种方法是在相关的元素上应用边框或者轮廓！：
.promol {
  float: left;
  margin-left: 5px;
  border: 1px solid red;
}

.promo2 {
  float: left;
  border: 1px solid green;
}
然后尝试修改几个属性，看看他们是否影响BUG，如果有影响，是怎么影响的，尝试使BUG的效果扩大化可能是有帮助的。例如，如果两个框之间的间隙在ID
中比你预期的要大，那么加大外边距，看看会发生什么，如果框之间的间隙在IE中加倍了，那么可能是遇到了IE的双外边距浮动BUG。

.promol {
  float: left;
  margin-left: 40px;
  border: 1px solid red;
}
.promo2 {
  float: left;
  border: 1px solid green;
}
尝试一些常见的解决方案，例如将position属性设置为relative, 将display属性设置为inline 或者设置宽度等尺寸，就可以修复许多IE BUG。


  9.3 拥有布局
IE与其他浏览器表现不同的原因之一是，显示引擎使用一个成为布局的内部概念。因为布局是一个专门针对显示引擎内部工作方式的概念！

9.3.1 什么是布局！ 

windows上的IE使用布局概念来控制元素的尺寸和定位。那些“拥有布局”的元素负责本身及其子元素的尺寸设置和定位。如果一个元素没有
拥有布局，那么它的尺寸和位置由最近的拥有布局的祖先元素控制！

IE显示引擎利用布局概念减少它的处理开销。在理想情况下，所有元素都控制自己的尺寸和定位。那么会导致很大的性能开销。因此布局应用于
实际需要它的哪些元素，默认情况下拥有布局的元素包括：

body
html
table 
tr, td
img
hr
input select textarea button 
iframe embed object applet 
marquee
 设置以下CSS属性会自动使元素拥有布局：
 
 
 9.3.2 布局的效果
 
 布局是许多IE显示BUG的根源。例如，如果一个文本段落靠着一个浮动元素，那么我们期望文本围绕这个元素，但在IE 6以及更低的版本中，如果段落
 有布局（例如设置了高度）那么他就会被限制为矩形，因此阻止文本围绕浮动元素。
 
 另一个问题是拥有布局的元素如何确定自己的尺寸。如果元素的内容变得比元素本身大， 那么我们希望内容溢出到元素外。但在IE6和更低版本中，拥有
 布局的元素会错误的扩展以便适应内容的尺寸。
 
 

9.4 解决方法

9.5常见的BUG

9.5.1 双外边距浮动BUG
这个Bug是IE 6和更低版本中的双外边距浮动BUG。这个windows bug使任何浮动元素上的外边距加倍！ 解决的方法是把display 属性设置为INLINE。
但是，这会阻止windows上的IE 6和更低版本将所有外边距加倍，每当对具有水平外边距的元素进行浮动时，都应该很自然的将display属性设置为hidden,
以备外边距将来被加大！

9.5.2 3像素文本偏移BUG

windows IE5 和IE 6上的3像素文本偏移BUG。 当文本与一个浮动元素相邻时，这个BUG就会出现。解决的办法是：首先给包含文本的元素设置任意的高度。
这会迫使元素拥有布局，这在表面上消除文本偏移。因为windows的IE 6和更低版本将height作为min-height那样对待，所以设置一个小的高度并不会影响
元素的实际尺寸。但会影响其他浏览器，所以使用条件注释把这些样式转移到单独的CSS文件中！

p {
  height: 1%;
}
前面学过拥有布局的元素被限制为矩形的，并且出现在浮动元素的旁边而不是他们的下面。添加200像素的外边距实际上会在IE 5 和IE6 中在浮动元素和段落
之间产生200像素的间隙。为了避免这个，需要将IE5 和IE6上的外边距重新设置为零：

p {
  height?: 1%;
  margin-left: 0;
}

文本偏移修复了，但是另一个3像素间隙出现了，这一次是在浮动元素上。为了去掉这个间隙，需要在浮动元素上设置一个负3像素的右外边距：
 
 p{
  height: 1%;
  margin-left: 0;
}

.myfloat {
  margin-right: -3px;
}

如果浮动元素是除了图像之外的任何其他东西，那么这个问题已经修复了。但是浮动元素是图像，那么还有最后一个问题需要解决。IE 5.x在图像的左右都添加
3像素的间隙，而IE 6不改变图像的外边距。因此，如果需要支持IE 5.x那么使用下面的：

p {
  height: 1%;
  margin-left: 0;
}
img.myfloat {
  marign: 0 -3px;
}

用于IE 6：
p {
  height: 1%;
  margin-left: 0;
}

img.myfloat {
  margin: 0;
}

9.5.3 IE 6的重复字符BUG

在某些情况下，一系列浮动元素的最后一个元素中的最后几个字符会在浮动元素下面重复出现！

当在一系列浮动元素的第一个和最后一个元素之间有多个注释时，就会出现这个BUG。前面的两个注释没有影响，但是后续的每个注释会导致两个字符重复出现。所以
3个注释会导致两个重复字符，4个注释会导致4个重复字符，，。。。。

最好的解决办法是删除注释，，，，



9.5.4 IE 6藏猫猫BUG

出现这个BUG的条件是一个浮动元素后面跟着一些非浮动元素，然后是清理元素，所有这些元素都包含在一个设置了背景颜色或图像的父元素中。如果清理
元素碰到了浮动元素，那么中间的非浮动元素看起来消失了，隐藏到了父元素的背景颜色或图像后面，只有在刷新页面时才重新出现！

有许多方法解决这个问题，最容易的是去掉父元素上的背景颜色或图像，或者避免清理元素与浮动元素接触。 如果容器元素应用了特定的尺寸，那么
这个BUG似乎就不出现了。。。

9.5.5 相对容器中的绝对定位

IE 6中有许多BUG，主要的原因在于相对定位的元素没有获得IE 内部hasLayout属性。因此，它们不创建新的定位上下文，所有绝对定位元素相对于视口进行定位。

为了使IE 6和更低版本表现正确，需要迫使相对定位的容器拥有布局。一种方法是在容器上显示地设置width和heignt.但是我们常常希望在不知道容器
width和height的情况下，或者在需要这些属性保持灵活的情况下使用这种技术！

我们可以使用条件注释过滤IE 5和IE 6，容器布局提供一个任意的高度。这会让容器拥有布局，

.container {
  height: 1%;
}

